[Config Step1]
description = "Static routing"
network = Network

# do not add direct routes
*.configurator.addDirectRoutes = false

# Application parameters
*.host0.numApps = 1
*.host0.app[0].typename = "PingApp"
*.host0.app[0].destAddr = "host6"

*.*.ipv4.arpType = "GlobalArp"

# Visualizer settings
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true

# ---------------------------------------------------------------

[Config Step2]
description = "Pinging after RIP convergence"
network = Network

# adding default routes in all hosts
*.configurator.config = xml("<config> \
								<interface hosts='**' address='10.x.x.x' netmask='255.x.x.x'/> \
                                <route hosts='host*' destination='*' netmask='0.0.0.0' interface='eth0' /> \
                             </config>")

*.configurator.addStaticRoutes = false

# RIP parameters on routers
*.router*.hasRIP = true
*.router*.rip.startupTime = uniform(0s,1s)
# disable advanced features for now!
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='NoSplitHorizon' /> </config>")
*.router*.rip.triggeredUpdate = false

# Application parameters
*.host0.numApps = 1
*.host0.app[0].typename = "PingApp"
*.host0.app[0].destAddr = "host6"
*.host0.app[0].startTime = 50s

# turning on global ARP to focus on the RIP messages
#*.*.ipv4.arpType = "GlobalArp"  # TODO: for some reasons GlobalArp does not work

# Visualizer settings
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true

# ---------------------------------------------------------------

[Config Step3]
description = "Link Breakage"
extends = Step2

# enable split horizon in order for the scenario to work properly
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# disable ping application
*.host0.numApps = 0

*.scenarioManager.script = xmldoc("scenario2.xml")

# ---------------------------------------------------------------

[Config Step4]
description = "RIP Timeout timer and garbage-collection timer"
extends = Step2

# enable split horizon in order for the scenario to work properly
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# disable ping application
*.host0.numApps = 0

*.scenarioManager.script = xmldoc("scenario1.xml")

# ---------------------------------------------------------------

[Config Step5]
description = "RIP Triggered Update"
extends = Step3

*.router*.rip.triggeredUpdate = true

# ---------------------------------------------------------------

[Config Step6]
description = "Counting to Infinity (Two-node loop instability)"
network = Network2

# adding default routes in all hosts
*.configurator.config = xml("<config> \
								<interface hosts='**' address='10.x.x.x' netmask='255.x.x.x'/> \
                                <route hosts='host*' destination='*' netmask='0.0.0.0' interface='eth0' /> \
                             </config>")

*.configurator.addStaticRoutes = false

# RIP parameters on routers
*.router*.hasRIP = true
*.router*.rip.startupTime = uniform(0s,1s)
# disable advanced features for now!
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='NoSplitHorizon' /> </config>")
*.router*.rip.triggeredUpdate = false

# turning on global ARP to focus on the RIP messages
#*.*.ipv4.arpType = "GlobalArp"  # TODO: for some reasons GlobalArp does not work

*.scenarioManager.script = xmldoc("scenario4.xml")

# Visualizer settings
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true

# to solve the counting to infinity problem (two nodes instability), you can:

# 1) enable 'split horizon'
#*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# 2) or enable 'split horizon with poissoned reverse'
#*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizonPoisenedReverse' /> </config>")

# 3) activating triggered update is not a definite solution, because 
# it might get canceled due to the regular update timer being fired very soon! 
#*.router*.rip.triggeredUpdate = true

# ---------------------------------------------------------------

[Config Step7]
description = "Counting to Infinity (Loop Instability with Higher Number of Nodes)"
extends = Step6
network = Network3

# even split horizon with/without poissoned reverse is not able to solve this loop instability
#*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# triggered update causes the count to infinity to finsih faster!

# one solution is to use hold-down timer (next step)

# ---------------------------------------------------------------

[Config Step8]
description = "Hold-down timer"
extends = Step7

# enabling split horizon with/without poissoned reverse alone does not solve the problem
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

*.router*.rip.holdDownTime = 30s

# ---------------------------------------------------------------

[Config Step9]
description = "Measure RIP recovery time"
extends = Step2

*.host0.numApps = 1
*.host0.app[0].typename = "UdpBasicApp"
*.host0.app[0].destAddresses = "host6"
*.host0.app[0].destPort = 1234
*.host0.app[0].startTime = 50s
*.host0.app[0].sendInterval = 0.5s
*.host0.app[0].messageLength = 32 bytes

*.host6.numApps = 1
*.host6.app[0].typename = "UdpSink"
*.host6.app[0].localPort = 1234

# TODO: change startup time to maximise the effect of triggered update
*.router*.rip.startupTime = uniform(0s,1s)
# enable split horizon in order for the scenario to work properly
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

*.scenarioManager.script = xmldoc("scenario3.xml")

*.router*.rip.triggeredUpdate = ${false, true}

# ---------------------------------------------------------------

[Config Step10]
description = "Configure an interface as NoRIP"
extends = Step2

# RIP messages should be sent to those interfaces that a neighbor router is present!

*.router0.rip.ripConfig = xml("<config> \
								<interface names='eth[0]' mode='NoRIP' /> \
								<interface metric='1' /> \
							</config>")

*.router2.rip.ripConfig = xml("<config> \
								<interface names='eth[1]' mode='NoRIP' /> \
								<interface metric='1' /> \
							</config>")
